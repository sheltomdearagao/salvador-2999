
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts";

const OPENAI_API_URL = "https://api.openai.com/v1/chat/completions";

serve(async (req) => {
  // Habilitando CORS
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }
  
  try {
    console.log("üìù Recebendo requisi√ß√£o para avalia√ß√£o de miss√£o");
    const { missionPrompt, userResponse } = await req.json();
    
    // Verificar se os dados necess√°rios est√£o presentes
    if (!missionPrompt || !userResponse) {
      console.error("‚ùå Dados incompletos na requisi√ß√£o");
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: "Dados incompletos. Por favor, forne√ßa o prompt da miss√£o e a resposta do usu√°rio." 
        }),
        { 
          headers: { ...corsHeaders, "Content-Type": "application/json" },
          status: 400 
        }
      );
    }

    // Tentar obter a chave API do header customizado ou do ambiente
    const userApiKey = req.headers.get("X-User-API-Key");
    const envApiKey = Deno.env.get("OPENAI_API_KEY");
    const apiKey = userApiKey || envApiKey;

    // Verificar se alguma chave da API est√° dispon√≠vel
    if (!apiKey) {
      console.error("‚ùå Nenhuma chave da API OpenAI encontrada");
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: "Chave da API OpenAI n√£o encontrada. Configure sua chave API." 
        }),
        { 
          headers: { ...corsHeaders, "Content-Type": "application/json" },
          status: 401 
        }
      );
    }

    const keySource = userApiKey ? "usu√°rio" : "ambiente";
    console.log(`üîë Usando chave da API OpenAI do ${keySource}`);

    // Enviar requisi√ß√£o para a API OpenAI
    const response = await fetch(OPENAI_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: `Voc√™ √© um especialista em avalia√ß√£o da Compet√™ncia V da reda√ß√£o do ENEM.

INSTRU√á√ïES IMPORTANTES:
- Voc√™ DEVE responder EXATAMENTE no formato especificado abaixo
- Use Markdown para formata√ß√£o clara
- Seja preciso na identifica√ß√£o dos elementos

CRIT√âRIOS DE AVALIA√á√ÉO:
Uma proposta de interven√ß√£o completa deve ter 5 elementos:

1. **A√á√ÉO** - O que deve ser feito (verbo/a√ß√£o concreta)
2. **AGENTE** - Quem executar√° (governo, minist√©rio, escola, fam√≠lia, etc.)
3. **MODO/MEIO** - Como ser√° feito (por meio de, atrav√©s de, etc.)
4. **EFEITO** - Para que serve (finalidade: para que, a fim de, etc.)
5. **DETALHAMENTO** - Informa√ß√£o adicional sobre qualquer elemento

PONTUA√á√ÉO:
- 5 elementos = 200 pontos
- 4 elementos = 160 pontos  
- 3 elementos = 120 pontos
- 2 elementos = 80 pontos
- 1 elemento = 40 pontos
- 0 elementos = 0 pontos

FORMATO DE RESPOSTA OBRIGAT√ìRIO (use exatamente este formato):

## üìä An√°lise dos Elementos

### ‚úÖ Elementos identificados:
[Liste cada elemento encontrado com explica√ß√£o clara]

### ‚ùå Elementos ausentes:
[Liste elementos que faltam]

---

## üéØ Resultado Final
**Pontua√ß√£o:** X/200  
**Elementos v√°lidos:** Y/5

---

## üí° Sugest√µes de Melhoria
[Dicas espec√≠ficas e pr√°ticas para melhorar]

IMPORTANTE: Use exatamente este formato com os emojis e estrutura Markdown especificados.`
          },
          {
            role: "user",
            content: `**Miss√£o:** ${missionPrompt}\n\n**Resposta do usu√°rio:** ${userResponse}\n\nAvalie esta proposta de interven√ß√£o seguindo rigorosamente o formato especificado.`
          }
        ],
        temperature: 0.1,
        max_tokens: 1000,
      }),
    });

    const data = await response.json();
    
    if (data.error) {
      console.error("‚ùå Erro na API OpenAI:", data.error.message);
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: data.error.message || "Erro ao processar a avalia√ß√£o." 
        }),
        { 
          headers: { ...corsHeaders, "Content-Type": "application/json" },
          status: 500 
        }
      );
    }

    console.log("‚úÖ Avalia√ß√£o conclu√≠da com sucesso");
    const evaluation = data.choices[0].message.content;
    
    // Extrair pontua√ß√£o com regex mais robusta
    const scoreMatch = evaluation.match(/\*\*Pontua√ß√£o:\*\*\s*(\d+)\/200/i) || 
                     evaluation.match(/Pontua√ß√£o:\s*(\d+)\/200/i) ||
                     evaluation.match(/(\d+)\/200/);
    const score = scoreMatch ? parseInt(scoreMatch[1]) : undefined;
    
    // Extrair elementos v√°lidos
    const elementsMatch = evaluation.match(/\*\*Elementos v√°lidos:\*\*\s*(\d+)\/5/i) ||
                         evaluation.match(/Elementos v√°lidos:\s*(\d+)\/5/i) ||
                         evaluation.match(/(\d+)\/5/);
    const elementsCount = elementsMatch ? parseInt(elementsMatch[1]) : undefined;

    console.log("üìä Pontua√ß√£o extra√≠da:", score);
    console.log("üìä Elementos extra√≠dos:", elementsCount);

    // Montando a resposta final
    const result = {
      success: true,
      evaluation,
      score,
      elementsCount
    };

    return new Response(
      JSON.stringify(result),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("‚ùå Erro na fun√ß√£o de avalia√ß√£o:", error);
    return new Response(
      JSON.stringify({ success: false, error: error.message || "Erro desconhecido." }),
      { 
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 500 
      }
    );
  }
});
