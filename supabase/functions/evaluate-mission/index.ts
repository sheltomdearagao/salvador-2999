
// supabase/functions/evaluate-mission/index.ts

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts";
import { logInfo, logWarn, logError } from "../_shared/log.ts";

// ===== UTILIT√ÅRIOS =====

export function validarCorpoRequisicao(body: any): { valid: boolean; error?: string } {
  if (!body || typeof body !== "object") {
    return { valid: false, error: "Corpo da requisi√ß√£o deve ser um objeto JSON." };
  }
  const { missionPrompt, userResponse } = body;
  if (typeof missionPrompt !== "string" || !missionPrompt.trim()) {
    return { valid: false, error: "O 'missionPrompt' deve ser uma string n√£o vazia." };
  }
  if (typeof userResponse !== "string" || !userResponse.trim()) {
    return { valid: false, error: "O 'userResponse' deve ser uma string n√£o vazia." };
  }
  if (missionPrompt.length > 2048) {
    return { valid: false, error: "O 'missionPrompt' deve ter no m√°ximo 2048 caracteres." };
  }
  if (userResponse.length > 2048) {
    return { valid: false, error: "O 'userResponse' deve ter no m√°ximo 2048 caracteres." };
  }
  return { valid: true };
}

// Rate limiting
const rateLimitMap = new Map<string, { count: number; resetTime: number }>();
const RATE_LIMIT = 10;
const RATE_LIMIT_WINDOW = 60 * 60 * 1000; // 1 hora em ms
const CLEANUP_INTERVAL = 60 * 60 * 1000; // Limpeza a cada 1h

export function obterIPReal(req: Request): string {
  return req.headers.get("x-forwarded-for")?.split(",")[0]?.trim() ||
    req.headers.get("x-real-ip") ||
    "unknown";
}

function checarRateLimit(ip: string): boolean {
  const agora = Date.now();
  const info = rateLimitMap.get(ip);

  if (!info || agora > info.resetTime) {
    rateLimitMap.set(ip, { count: 1, resetTime: agora + RATE_LIMIT_WINDOW });
    return true;
  }
  if (info.count >= RATE_LIMIT) {
    return false;
  }
  info.count++;
  return true;
}

// Limpeza peri√≥dica dos IPs expirados
setInterval(() => {
  const agora = Date.now();
  for (const [ip, info] of rateLimitMap) {
    if (agora > info.resetTime) {
      rateLimitMap.delete(ip);
    }
  }
}, CLEANUP_INTERVAL);

// Fun√ß√£o para ler body com limite
export async function lerBodyJSON(req: Request, maxSize: number): Promise<any> {
  const reader = req.body?.getReader();
  if (!reader) throw new Error("Body reader n√£o dispon√≠vel.");
  let total = 0;
  let chunks: Uint8Array[] = [];
  while (true) {
    const { done, value } = await reader.read();
    if (done) break;
    total += value.length;
    if (total > maxSize) throw new Error("Requisi√ß√£o muito grande.");
    chunks.push(value);
  }
  const rawBody = new Uint8Array(total);
  let offset = 0;
  for (const chunk of chunks) {
    rawBody.set(chunk, offset);
    offset += chunk.length;
  }
  return JSON.parse(new TextDecoder().decode(rawBody));
}

// ===== HANDLER PRINCIPAL =====
serve(async (req) => {
  // CORS para todas as rotas
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  // Limite de body
  const MAX_BODY_SIZE = 53000; // ~53KB

  let corpoJson: any;
  try {
    corpoJson = await lerBodyJSON(req, MAX_BODY_SIZE);
  } catch (err) {
    logWarn("Erro ao ler o body", { error: err.message });
    return new Response(
      JSON.stringify({
        success: false,
        error: err.message.includes("muito grande")
          ? "Requisi√ß√£o muito grande. Tamanho m√°ximo: 53KB."
          : "Body inv√°lido. Envie um JSON v√°lido.",
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: err.message.includes("muito grande") ? 413 : 400,
      }
    );
  }

  // Rate limiting
  const ipCliente = obterIPReal(req);
  if (!checarRateLimit(ipCliente)) {
    logWarn("Rate limit atingido", { ip: ipCliente });
    return new Response(
      JSON.stringify({
        success: false,
        error: "Muitas avalia√ß√µes. Tente novamente em 1 hora.",
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 429,
      }
    );
  }

  // Valida√ß√£o dos campos
  const validacao = validarCorpoRequisicao(corpoJson);
  if (!validacao.valid) {
    logWarn("Corpo de requisi√ß√£o inv√°lido", { erro: validacao.error });
    return new Response(
      JSON.stringify({ success: false, error: validacao.error }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 400,
      }
    );
  }

  const { missionPrompt, userResponse } = corpoJson;
  logInfo("Requisi√ß√£o recebida para avalia√ß√£o", { ip: ipCliente });

  // Chave da OpenAI
  const apiKey = Deno.env.get("OPENAI_API_KEY");
  if (!apiKey) {
    logError("Chave da API OpenAI n√£o configurada no servidor");
    return new Response(
      JSON.stringify({
        success: false,
        error: "Servi√ßo temporariamente indispon√≠vel. Tente novamente mais tarde.",
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 503,
      }
    );
  }

  // Prompt do sistema (use seu prompt completo aqui)
  const promptSistema = `Voc√™ √© um especialista em avalia√ß√£o da Compet√™ncia V da reda√ß√£o do ENEM.

# ‚úÖ PROMPT DEFINITIVO PARA AVALIA√á√ÉO DA COMPET√äNCIA 5 DO ENEM
# üëá Use este comando com modelos da OpenAI (GPT-4-turbo ou superior) para corrigir automaticamente propostas de interven√ß√£o.
# üöÄ Otimizado para integra√ß√£o com ferramentas autom√°ticas via API ou interface direta no Playground.
# üß† Baseado em crit√©rios oficiais do ENEM + diretrizes espec√≠ficas do professor Sheltom.

Sua tarefa √© analisar a proposta de interven√ß√£o apresentada em uma reda√ß√£o do ENEM, avaliando a Compet√™ncia 5 com base nos crit√©rios abaixo. Siga o passo a passo com rigor. Use marca√ß√µes com [...]

---

üéØ OBJETIVO:
Corrigir a Compet√™ncia 5 da reda√ß√£o do ENEM com base no n√∫mero de elementos **expl√≠citos e v√°lidos** na proposta de interven√ß√£o apresentada.

---

üß© ETAPAS:

1. **Identifique as propostas de interven√ß√£o.**
   - Se houver mais de uma, avalie **apenas aquela com mais elementos v√°lidos**.
   - N√£o some elementos de propostas diferentes.
   - Informe ao final qual proposta foi considerada para atribui√ß√£o da nota.

2. **Avalie a proposta com base nos 5 elementos obrigat√≥rios:**

   ‚úÖ **A√á√ÉO** ‚Üí O que deve ser feito?
   - V√°lido: "criar campanhas", "investir em projetos sociais".
   - Nulo: "√© necess√°rio agir", "medidas devem ser tomadas".

   ‚úÖ **AGENTE** ‚Üí Quem executar√° a a√ß√£o?
   - V√°lido: "o governo federal", "ONGs", "a m√≠dia", "as escolas".
   - Nulo: "deve-se promover" (sem indicar o agente).

   ‚úÖ **MEIO/MODO** ‚Üí Como a a√ß√£o ser√° realizada? SEMPRE introduzido por express√µes como "atrav√©s de", "por meio de", "mediante", "por interm√©dio de", e equivalentes
   - V√°lido: "por meio de aplicativos", "com palestras em escolas p√∫blicas".
   - Nulo: "de forma eficaz", "com responsabilidade", "rapidamente".

   ‚úÖ **FINALIDADE** ‚Üí Para qu√™? Qual o objetivo da a√ß√£o?
   - V√°lido: "a fim de reduzir o preconceito", "com o objetivo de informar os jovens".
   - Nulo: "para o bem de todos", "visando melhorias" (vago ou decorativo).
   - Considere v√°lidos elementos vagos e superficiais, como "Para resolver esse problema", ou "A fim de acabar com [problema do tema]", desde que tenha uma rela√ß√£o l√≥gica de objetivo ou efeito da a√ß√£o

   ‚úÖ **DETALHAMENTO** ‚Üí Informa√ß√£o espec√≠fica, concreta e relevante que complementa outro elemento (agente, a√ß√£o, meio ou finalidade). O detalhamento pode se apresentar como exemplifica√ß√£o, especifica√ß√£o, explica√ß√£o, justificativa, e desdobramento da finalidade [...]
   - V√°lido: "campanhas elaboradas com influenciadores digitais para o p√∫blico adolescente".
   - Nulo: repeti√ß√£o de outro elemento com outras palavras, ou algo gen√©rico.
   - V√°lido: "(...), onde/em que o celular seja uma ferramenta de apoio, e n√£o um empecilho √† educa√ß√£o"
   - Considere v√°lidos elementos superficiais, como "S√≥ assim, o Brasil ser√° um pa√≠s melhor", ou "Sendo assim, alcan√ßaremos uma sociedade mais justa", desde que esteja relacionado de forma l√≥gica com um dos outros elementos, indicando consequ√™ncia, explica√ß√£o, justificaiva, ou exemplo.

3. **Aten√ß√£o a estruturas condicionais!**
   - Se a proposta estiver formulada como hip√≥tese (ex: "caso medidas sejam tomadas..."), atribua diretamente **80 pontos**.
   - Ignore a contagem de elementos nesse caso.

4. **Desconsidere elementos impl√≠citos, subentendidos ou vagos.**
   - Avalie apenas o que est√° claramente **expl√≠cito no texto**.
   - N√£o complete lacunas com infer√™ncias nem recompense formula√ß√µes incompletas.

5. **Nunca conte o mesmo trecho escrito para dois elementos diferentes**

6. **Ao final, ofere√ßa sugest√µes de como a proposta avaliada poderia ficar completa**

7. **Se algum elemento n√£o estiver presente, n√£o precisa expor nenhum trecho** 
-Exponha apenas trechos de elementos v√°lidos e inv√°lidos, explicando porque s√£o v√°lidos ou n√£o.
---

üìä TABELA DE PONTUA√á√ÉO:

- üü¢ 5 elementos v√°lidos ‚Üí **200 pontos**
- üîµ 4 elementos v√°lidos ‚Üí **160 pontos**
- üü° 3 elementos v√°lidos ‚Üí **120 pontos**
- üü† 2 elementos v√°lidos ou estrutura condicional ‚Üí **80 pontos**
- üî¥ 1 elemento v√°lido ou todos nulos ‚Üí **40 pontos**
- ‚ö´ Nenhum elemento v√°lido ‚Üí **0 pontos**

---
`;

  try {
    // Chamada √† OpenAI com par√¢metros mais determin√≠sticos
    const resposta = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: [
          { role: "system", content: promptSistema },
          {
            role: "user",
            content: `**Miss√£o:** ${missionPrompt}\n\n**Resposta do usu√°rio:** ${userResponse}\n\nAvalie esta proposta de interven√ß√£o seguindo rigorosamente o formato especificado.`
          }
        ],
        temperature: 0.1, // Reduzido de 0.91 para 0.1 para maior consist√™ncia
        top_p: 1, // Adicionado para maior determinismo
        max_tokens: 2500,
      }),
    });

    const data = await resposta.json();

    if (data.error) {
      logError("Erro na API OpenAI", { mensagem: data.error.message });
      return new Response(
        JSON.stringify({ success: false, error: "Erro ao processar a avalia√ß√£o. Tente novamente." }),
        { headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 500 }
      );
    }

    const avaliacao = data.choices[0].message.content;

    // Regex para extra√ß√£o de score e elementos v√°lidos
    const pontuacaoMatch = avaliacao.match(/\*\*Pontua√ß√£o:\*\*\s*(\d+)\/200/i)
      || avaliacao.match(/Pontua√ß√£o:\s*(\d+)\/200/i)
      || avaliacao.match(/(\d+)\/200/);
    const pontuacao = pontuacaoMatch ? parseInt(pontuacaoMatch[1]) : undefined;

    const elementosMatch = avaliacao.match(/\*\*Elementos v√°lidos:\*\*\s*(\d+)\/5/i)
      || avaliacao.match(/Elementos v√°lidos:\s*(\d+)\/5/i)
      || avaliacao.match(/(\d+)\/5/);
    const elementosValidos = elementosMatch ? parseInt(elementosMatch[1]) : undefined;

    logInfo("Avalia√ß√£o conclu√≠da", { pontuacao, elementosValidos, ip: ipCliente });

    // Resposta final
    return new Response(
      JSON.stringify({
        success: true,
        evaluation: avaliacao,
        score: pontuacao,
        elementsCount: elementosValidos
      }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 200 }
    );

  } catch (error) {
    logError("Erro na fun√ß√£o de avalia√ß√£o", { error: error.message });
    return new Response(
      JSON.stringify({ success: false, error: "Erro interno do servidor." }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 500 }
    );
  }
});
